const { OpenAI } = require('openai');
const Tesseract = require('tesseract.js');
const pdf = require('pdf-parse');
const { createClient } = require('@supabase/supabase-js');
const { jsonrepair } = require('jsonrepair');

const openai = new OpenAI({
  apiKey: process.env.OPENAI_KEY
});

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

function sanitizarTexto(texto) {
  return texto
    .replace(/\\/g, '\\\\')
    .replace(/"/g, '\\"')
    .replace(/\n/g, '\\n')
    .replace(/\t/g, '\\t')
    .replace(/\r/g, '\\r');
}

async function processarCurriculo(responseId) {
  try {
    const { data: arquivos, error } = await supabase.storage
      .from('curriculo')
      .list(responseId, { limit: 1 });

    if (error || !arquivos?.length) return null;

    const arquivo = arquivos[0];
    const caminho = `${responseId}/${arquivo.name}`;
    
    const { data: fileData, error: downloadError } = await supabase.storage
      .from('curriculo')
      .download(caminho);

    if (downloadError) throw downloadError;

    const arrayBuffer = await fileData.arrayBuffer();
    const buffer = Buffer.from(arrayBuffer);

    if (['jpg', 'jpeg', 'png'].includes(arquivo.name.split('.').pop().toLowerCase())) {
      const { data: { text } } = await Tesseract.recognize(buffer, 'por');
      return sanitizarTexto(text.substring(0, 2000));
    }
    
    if (arquivo.name.endsWith('.pdf')) {
      const data = await pdf(buffer);
      return sanitizarTexto(data.text.substring(0, 2000));
    }

    return null;
  } catch (error) {
    console.error('üîß Erro no processamento do curr√≠culo:', error.message);
    return null;
  }
}

async function estruturarDados(response) {
  try {
    const answersSanitized = sanitizarTexto(JSON.stringify(response.answers));
    
    const prompt = `Estruture estes dados de formul√°rio em JSON v√°lido:
    {
      "pessoal": {
        "nome": "Texto",
        "email": "Texto",
        "telefone": "Texto",
        "cpf": "Texto",
        "cidade": "Texto"
      },
      "profissional": {
        "vaga": "Texto",
        "experiencia": "Texto",
        "escolaridade": "Texto"
      }
    }
    
    Dados brutos: ${answersSanitized}`;

    const completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo-0125",
      messages: [{ role: "system", content: prompt }],
      temperature: 0.1,
      max_tokens: 500,
      response_format: { type: "json_object" }
    });

    const rawJSON = completion.choices[0].message.content;
    const validJSON = rawJSON
      .replace(/\\\"/g, '"')
      .replace(/'/g, '"')
      .replace(/}\s*{/g, '},{')
      .replace(/,\s*}/g, '}');

    return JSON.parse(validJSON);
  } catch (error) {
    console.error('üìÑ Erro na estrutura√ß√£o dos dados:', error.message);
    return null;
  }
}

async function analisarCandidatura(response, caminhoCurriculo) {
  let rawAnalysis;
  try {
    const textoCurriculo = caminhoCurriculo 
      ? await processarCurriculo(response.response_id)
      : 'Nenhum curr√≠culo enviado';

    const dadosSanitized = sanitizarTexto(JSON.stringify({
      formulario: response.answers,
      curriculo: textoCurriculo
    }));

    const prompt = `Voc√™ √© um especialista em recrutamento e sele√ß√£o, extremamente criterioso e anal√≠tico.

Sua tarefa √© analisar um candidato com base nas seguintes informa√ß√µes, fornecendo sua an√°lise exclusivamente no formato JSON.

---
REGRAS E L√ìGICA DA AN√ÅLISE:

1.  Seja Criterioso: A pontua√ß√£o deve ser rigorosa. Pr√©-requisitos n√£o atendidos devem impactar a nota severamente.
2.  Baseie-se em Evid√™ncias: N√£o presuma ou invente informa√ß√µes. Todas as an√°lises devem ser baseadas nos dados fornecidos.
3.  Pontua√ß√£o Objetiva: Para o campo "pontuacao_final", gere um n√∫mero isolado de 0 a 100, considerando a ader√™ncia do candidato aos pr√©-requisitos, diferenciais e atividades da vaga.
4.  L√≥gica da Recomenda√ß√£o: Para o campo "recomendacao", use a pontua√ß√£o final como base:
    - De 0 a 40: "N√£o Recomendado"
    - De 41 a 70: "Recomendado"
    - De 71 a 100: "Altamente Recomendado"
5.  Formato JSON Exclusivo: Sua resposta final deve ser APENAS o c√≥digo JSON, sem nenhum texto introdut√≥rio ou final.

AN√ÅLISE ESPERADA (SA√çDA EM FORMATO JSON):
{
  "resumo_profissional": "Um resumo conciso do perfil do candidato e sua adequa√ß√£o √† vaga.",
  "pontos_fortes": [
    {
      "ponto": "Exemplo: Forma√ß√£o acad√™mica relevante.",
      "evidencia": "Exemplo: Curr√≠culo menciona sua gradua√ß√£o em Engenharia."
    }
  ],
  "pontos_fracos": [
    {
      "ponto": "Exemplo: Falta de experi√™ncia direta.",
      "evidencia": "Exemplo: Question√°rio indica que nunca trabalhou com entregas."
    }
  ],
  "pontuacao_final": 0,
  "justificativa_pontuacao": "A pontua√ß√£o foi definida com base na falta do pr√©-requisito X, mas considerando a boa ader√™ncia ao diferencial Y.",
  "recomendacao": "N√£o Recomendado",
  "perguntas_entrevista": [
    "Primeira pergunta baseada nos pontos fracos ou red flags...",
    "Segunda pergunta para explorar uma poss√≠vel inconsist√™ncia..."
  ]
}

DADOS DO CANDIDATO:
${dadosSanitized}`;

    const completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo-0125",
      messages: [{ role: "system", content: prompt }],
      temperature: 0.1,
      max_tokens: 500,
      response_format: { type: "json_object" }
    });

    rawAnalysis = completion.choices[0].message.content;
    const validAnalysis = rawAnalysis
      .replace(/'/g, '"')
      .replace(/\"/g, '"')
      .replace(/},\s*}/g, '}}');

    try {
      return JSON.parse(validAnalysis);
    } catch (error) {
      try {
        const repaired = jsonrepair(validAnalysis);
        return JSON.parse(repaired);
      } catch (err2) {
        console.error('Erro ao reparar/parsear JSON da IA:', error.message, '\nResposta crua:', rawAnalysis);
        return {
          error: "Erro na an√°lise",
          details: error.message,
          raw: rawAnalysis
        };
      }
    }
  } catch (error) {
    console.error('üîç Erro na an√°lise da candidatura:', error.message);
    if (typeof rawAnalysis !== 'undefined') {
    }
    return { 
      error: "Erro na an√°lise",
      details: error.message 
    };
  }
}

module.exports = {
  analisarCandidatura,
  estruturarDados
};